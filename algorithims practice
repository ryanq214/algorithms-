// Make a function that reverse an array without using the reverse method
//and without putting it into another array.
function reverseArrayInPlace(arr){
  var l=arr.length*2, d=arr.length;
  for (var i=0; i<l; i+=2){
    arr.unshift(arr[i]);
  }
  for (var i=0; i<d; i++){
       arr.pop();
       }
  return arr;}
var arrayValue = [1, 2, 3, 4, 5];
reverseArrayInPlace(arrayValue);
console.log(arrayValue);
//-->[5,4,3,2,1]

//You are boarding a train and your friend wants to know how long until you arrive.  Round the answer to the nearest half hour.
// answer "The train will be there in ? hours."
function reachDestination(distance, speed) {
	var x=distance/speed;
  x=(Math.round(x*2))/2;
  // this rounds it to the nearest half or whole number .
  return "The train will be there in " + x + " hours.";
}
console.log(reachDestination(74,20));
//-->The train will be there in 3.5 hours.
// a pretty simple one.  the hardest part was finding a way to round to the nearest half or whole number.

//you are given a number and you need to return two arrays.
//The first will have any number that when squared equals a factor of the number given or the number itself.
// the second array will have any numbers that when cubed equal a factor or the number itself.
function factor(n) {
  var factors=[], sq=[], cub=[];
  for (var i=0; i<=n; i++){
    for(var d=0; d<=n; d++){
      if (i*d===n){ factors.unshift(d);}
    }
  }
  factors.shift();
  for (var i=2; i<=n; i++){
    if (factors.indexOf(i*i)!=-1){ sq.push(i);}
  }
  for (var i=2; i<=n; i++){
    if(factors.indexOf(i*i*i)!=-1){cub.push(i);}
  }
  return [sq, cub];
}
console.log(factor(81));
//-->[[3, 9], [3]]

///shorter version of the above function
function factor(n) {
  var factors=[], sq=[], cub=[];
  for (var i=0; i<=n; i++){
    for(var d=0; d<=n; d++){
      if (i*d===n){ factors.unshift(d);}
    }
  }
  factors.shift();
  for (var i=0; i<=Math.sqrt(n); i++){
 		if(Math.sqrt(factors[i])%1===0){ sq.push(Math.sqrt(factors[i]))};
    	if(factors.indexOf(i*i*i)!=-1){cub.push(i);}
  }
  return[sq, cub];
}


//The function should take one parameter: an object/dict with two or more name-value pairs which represent the members of the group and the amount spent by each.
//The function should return an object/dict with the same names, showing how much money the members should pay or receive.
//round decimals to the 2nd place
function splitTheBill(x) {
    var t= 0,a=0;
    for( var i in x){
      t=t+x[i];
      a+=1;
    }
  t=t/a;
  for(var i in x){
    x[i]= (t-x[i])*-1;
    if(x[i]===0){x[i]*-1}
    x[i]=1*x[i].toFixed(2);
  }
	return x;
}
var a={
    A: 40, B: 25, X: 10
}
console.log(splitTheBill(a));
//-->{A: 5, B: 0, C: -5}

//you are given two strings and you need to creat a function that adds these two strings
//together, sorts them from a-z, and gets rid of any duplicates.
function longest(s1, s2) {
  var ar=(s1+s2).split("")
  ar=ar.sort()
    ar=ar.filter(function (c,i,a){ if(c!=a[i+1]){ return c;} })
  return ar.join("");
}
var a = "xyaabbbccccdefww";
var b = "xxxxyyyyabklmopq";
console.log(longest(a,b));
//-->"abcdefklmopqwxy"

//creat a function that takes a number and returns the number in the descending order.
function descendingOrder(n){
  var ar=n.toString().split("").sort(function(a,b){ return b-a;}).join("");
  return ar*1;
}
console.log(descendingOrder(1254859723));
//Input: 145263 Output: 654321
//Input: 1254859723 Output: 9875543221

//create a function that counts the number of vowels in a string and returns the number.
function getCount(str) {
  var c = 0, v=["a", "e", "i", "o", "u"];
  str=str.toLowerCase().split("");
  for(var i=0; i<str.length; i++){
    for(var d=0; d<v.length; d++){
      if(str[i]===v[d]){ c++;}
    }
  }
  return c;
}
console.log(getCount("abracadabra"));
//-->5
//this is a better version using regular expressions.
function getCount(str) {
  return str.match(/[aeiou]/gi).length;
}

//you are given a start and end number and you should return the count of all numbers from the start to the end,
// except numbers with a 5 in it. The start and the end number are both included in the count
function dontGiveMeFive(x,y){
 var arr=[], n=0;
  for (var i=x; i<=y; i++){
    n=i.toString().split("");
  	if(n.indexOf("5")===-1){
      arr.push(i);
    }
  }
  return arr.length;
}
console.log(dontGiveMeFive(4,17));
//dontGiveMeFive(1,9) -> [1,2,3,4,6,7,8,9] -> Result 8
//dontGiveMeFive(4,17) -> [4,6,7,8,9,10,11,12,13,14,16,17] -> Result 12

//Given an array of numbers, return an array, with each member of input array rounded to
//the nearest number, divisible by 5.return the list with all numbers rounded to nearest 0 or 5
function roundToFive(num){
  var x=0,y=0
  for(var i=0; i<num.length; i++){
    x=num[i].toString().split("");
    if(x[x.length-1]>5){ x[x.length-1]-=5;}
    if(x[x.length-1]>=2.5){
      num[i]=Math.ceil(num[i]);
      while(num[i]%5!=0){
        num[i]+=1;
      }
    }
    else {
      num[i]=Math.floor(num[i]);
      while(num[i]%5!=0){
        num[i]-=1;
      }
  }
  }
  return num
}
console.log(roundToFive([2,46,8,71.3]));
//-->[0, 45, 10, 75]

//you have to create a function that will produce a multi-dimensional array out of the
//four digit number given. Each inner dimension of the array represents an individual
//digit from the given number, and will include all numbers that come before it, going back to 0.
function counterEffect(hitCount) {
 var arr=String(hitCount).split(""),na=[], ans=[];
 for(var i=0; i<arr.length; i++){
   	for(var d=0; d<=arr[i]; d++){
     na.push(d);
    }
   ans.push(na);
   na=[];
 }
  return ans;
}
console.log(counterEffect("0050"));
//-->[[0,1],[0,1,2],[0,1,2,3,4,5],[0]]);
//input=("0050"),  answer= [[0],[0],[0,1,2,3,4,5],[0]]);
//input=("0000"),  answer=[[0],[0],[0],[0]]);

//Your task is to write an update for a lottery machine.
//Its current version produces a sequence of random letters and integers (passed as a
//string to the function lottery()). Your code inside lottery() must filter out all
//letters and return unique integers as a string.
//If there are no integers in the string return - “One more run!”.
function lottery(str){
  var ar=str.split(""), ans=""
  for (var i=0; i<ar.length; i++){
    if(isNaN(ar[i]) === false && ans.split("").indexOf(ar[i])===-1){
      ans= ans + ar[i];}
  }
  if (ans.length===0){ return "One more run!";}
  return ans
}

console.log(lottery("wQ8Hy0y5m5oshQPeRCkG"))
//-->"805"
//input=("hPrBKWDH8yc6Lt5NQZWQ"), answer="865"
// input="ynMAisVpHEqpqHBqTrwH", answer="One more run!"

function lottery(str){
  var ar=str.replace(/[a-z]/gi, "");
 	ar=ar.split("").filter(function (c,i,a){ return a.indexOf(c)==i;}).join("");
  if(ar.length===0){ return "One more run!";}
  return ar
}

//Is every value in the array an array?
//This should only test the second array dimension of the array. The values of the
//nested arrays don't have to be arrays.
function arrCheck(x){
  var ans=true;
  for (var i=0; i<x.length; i++){
    if(Array.isArray(x[i]) != true){
     return false;
    }
  }
  return ans
}
console.log(arrCheck([{1:1},{2:2}]));
//[[1],[2]] => true
//['1','2'] => false
//[{1:1},{2:2}] => false

// a better version of the funciton above using the Each() method for arrays (that i just learned)
function arrCheck(x){
  return x.every (Array.isArray);
}

//write a function that finds the ascii value of a given name where a=65 and A=97.  Any
//character that is not in the alphabet= 0.
function getWeight(name){
  var val={a:65, b:66, c:67, d:68, e:69, f:70, g:71, h:72, i:73, j:74, k:75, l:76, m:77, n:78,
         o:79, p:80, q:81, r:82, s:83, t:84, u:85, v:86, w:87, x:88, y:89, z:90};
	var s=name.replace(/\s/, "").trim().split(""), ans=0,x=0;
  for(var i=0; i<s.length; i++){
    x=s[i];
    if(val[x]==undefined && val[x.toLowerCase()]==undefined){ continue;}
    if (s[i].toLowerCase()!=s[i]){
        ans+=32;
    	x=s[i].toLowerCase();}
   ans+=val[x];
    }
  return ans
}
console.log(getWeight("Joe"))
//--> 254
//console.log(getWeight("J45 oe*&")) -->254
//console.log(getWeight("CJ"))// 205);
//console.log(getWeight("cj"))// 141);
// this one was a little tougher than the last few.

// write a funciton that is given a string and a horizontal value(k) and a vertical value(v).
// the horizonatal value is number of times you should repeat each character, except for "\n".
// Ex: if k=2 and the string is "abc".  the result should be "aabbcc".
//the vertical value is the number of times you should repeat each section of letter between the "\n"
// Ex: if v=2 and the string given is "abc\ndef\nji".  you answer should be
//"abc\nabc\ndef\ndef\nji\nji".
// so if you are given a string "abc\nde", k=2, v=2.  then your answer should be this
//"aabbcc\naabbcc\nddee\nddee"
function scale(string, k, v) {
 if(string.length===0) { return string;}
  a= string.split(""),arr=[],ar=[],y="",x="";
  for (var i=0; i<a.length; i++){
    for (var d=0; d<k; d++){
      if(y!="\n"){
      y+=a[i];
    }; }
    ar.push(y);
    y="";
  }
	ar=ar.join("").split("\n");
  for (var i=0; i<ar.length; i++){
    for(var d=0; d<v; d++){
    	x= x+ar[i]+"\n";
    }
    arr.push(x);
    x="";
  }
 arr=arr.join("").split("");
  arr.pop();
  arr=arr.join("");
  return arr
}
var a = "abcd\nefgh\nijkl\nmnop"
console.log(scale(a,2,3));
//--> "aabbccdd\naabbccdd\naabbccdd\neeffgghh\neeffgghh\neeffgghh\niijjkkll\niijjkkll\niijjkkll\nmmnnoopp\nmmnnoopp\nmmnnoopp"

//Your task is to write a function which returns the sum of following series upto the
// nth term(parameter). Series: 1 + 1/4 + 1/7 + 1/10 + 1/13 + 1/16 +...
//You need to round the answer upto 2 decimal places and return it as String.
//If the given value is 0 then it should return 0.00
function SeriesSum(n){
  if(n===0){ return "0.00";}
  var arr=[1],x=0;
  for (var i=1; i<n; i++){
    arr.push( 1/(4+x));
    x+=3;
  }
  arr=arr.reduce(function (tv, cv) { return tv+=cv;});
  return arr.toFixed(2);
}
console.log(SeriesSum(1))//--> "1.00"
console.log(SeriesSum(2))//--> "1.25"
console.log(SeriesSum(3))//--> "1.39"
console.log(SeriesSum(4))//--> "1.49"

//this is a shorter version of the above function.  I don't know why i put it into an array first.
function SeriesSum(n){
  var x=0;
  for (var i=0; i<n; i++){
   x=x+1/(1+i*3);
  }
 return x.toFixed(2);
}

//Given a number, return the maximum value by rearranging it's digits.
function rotateToMax(n) {
  n=n.toString().split("").sort(function(a,b){ return b-a}).join("");
  return n*1
}
console.log(rotateToMax("001"));
//-->321
//(786) => 876
//("001)=> 100

// you are given an two strings and have to combine then in this way-->
//The first line of strng has the first char of the first line of s1 plus the chars of the last line of s2.
//The second line of strng has the first two chars of the second line of s1 plus the chars of the penultimate line of s2 except the last char
//and so on until the nth line of strng has the n chars of the nth line of s1 plus the first char of the first line of s2.
function compose(s1, s2) {
  //first I put the second string into and array and reverse it as chunks so its easier to combine with the 1st string(just going down the array).  then I put the first string into an array seperated by the \n character so its still in the chunks.
   s2=s2.split("\n").reverse(); s1=s1.split("\n");
  var arr=[],x=0,t=s1[0].length,y="",z=""
 //now i run a for loop going trhough the length of the s1 array, the first example has four chunks seperated by \n so it will run four times.
  for(var i=0; i<s1.length; i++){
   // this for loop goes into the s1 array and adds characters into the y variable, each times it goes through it adds 1 more character.  It adds just 1 character the first time, and then 2 and so on.  i used the var x as the limit, adding 1 to it at the end of the main loop.
    for (var d=0; d<=x; d++){
     y=y+s1[i][d];
    }
    // this for loop does what the one above does but starting by adding the most characters the first time,  then it adds one less character each time.  i used the y var as the limit for this loop starting it out as the length of a chunk in the s1 array and subtracting 1 from it at the end of the main loop.
    for(var c=0; c<t; c++){
      z=z+s2[i][c];
    }
    // at the end the main for loop i add the y and z variables together and put then into the new array that i made.  i also adjust the x and y variable for the inner for loops.
     arr.push(y +z);
    y="", z="";
    x++, t--;
  }
  // now i join the arr array into a string adding the \n in between the chunks
  return arr.join("\n");
}
console.log(compose ("abcd\nefgh\nijkl\nmnop", "qrst\nuvwx\nyz12\n3456"));
// -> "a3456\nefyz1\nijkuv\nmnopq"

// write three functions.  the first function (vert mirrors) is given a string and returns it with each set of character between the "\n" character is reversed but set in the same order and resturns this as a string.
//the second function (hor mirrors) is also given a string and returns it by reversing the order of the sets bewteen the "\n" but leaves the sets themselves in the same order and returns that as a string.
//The third function (oper) takes two parameters, a fuction (either vert mirror or hor mirror) and a string.  It then returns the string through that function and returns the answer.
function vertMirror(str) {
  //first i split the string into section between the "\n" character
  str=str.split("\n");
  //this loop goes through each section splitting them into arrays themselves so i can reverse them and return back into the original array as reversed strings.
  for (var i=0; i<str.length; i++){
    str[i]=str[i].split("").reverse().join("");}
  //then i join the array back together with the "\n" between the sections.
  return str.join("\n");
}
function horMirror(str) {
  //I first split the string into sets again but this time i reverse the array as a whole without reversing the sets themselves.  then i join it back into a string.
    str=str.split("\n").reverse().join("\n");
  return str;
}
function oper(fct, s) {
    return fct(s);
}
s = "abcd\nefgh\nijkl\nmnop"
console.log(vertMirror(s))// => "dcba\nhgfe\nlkji\nponm"
console.log(horMirror(s));// => "mnop\nijkl\nefgh\nabcd"
console.log(oper(vertMirror, s));// => "dcba\nhgfe\nlkji\nponm"
console.log(oper(horMirror, s))// => "mnop\nijkl\nefgh\nabcd"

//Create a function that will take three parameters(fmt, nbr and start) and create an array of nbr elements formatted according to the frm with the starting index of start.
//fmt will have <index_no> inserted at various locations; this is where the file index number goes in each file.
//If nbr is less than or equal to 0, or not whole, return an empty array.
//If fmt does not contain '<index_no>', just return an array with nbr elements that are all equal to fmt.
//If start is not an integer, return an empty array.
function nameFile (fmt, nbr, start){
  if(nbr<=0|| nbr%1!=0){ return [];}
  if (start%1!=0){ return [];}
  var ar=[];
  //pretty simple i make a for loop that replaces the <index_no> in fmt with the current start value and pushes it into the new array
  for (var i=0; i<nbr; i++){
    // here i meet the condition if there is no <index_no> in the fmt
    if (fmt.indexOf("<index_no>")===-1){ ar.push(fmt);}
    else {ar.push(fmt.replace(/<index_no>/gi, start)) }
    //at the end fo the for loop i increase the start value by 1
    start ++;
  }
	return ar;
}
console.log(nameFile("IMG <index_no>", 4, 1));//-->["IMG 1", "IMG 2", "IMG 3", "IMG 4"])
console.log(nameFile("image #<index_no>.jpg", 3, 7))
//-->["image #7.jpg", "image #8.jpg", "image #9.jpg"]
console.log(nameFile("#<index_no> #<index_no>", 3, -2));
//-->["#-2 #-2", "#-1 #-1", "#0 #0"]

// here is a better version of the above function using the map method for an array.  I should have rememberd the map.
function nameFile(fmt, nbr, start) {
  return nbr <= 0 || start % 1 !== 0 || nbr % 1 !== 0 ? [] : str.split(" ").map(function(_, i){ return fmt.replace(/\<index\_no\>/g, start + i) });
}

//In mathematics, the factorial of a non-negative integer n, denoted by n!, is the product of all positive integers less than or equal to n.
//For example, 5! = 5 * 4 * 3 * 2 * 1 = 120.
//You have to create the function factorial that receives n and returns n!. You have to use recursion.
function factorial(n) {
  //first i check to make sure that n isn't 0 if it is i return 1.
  if(n===0){ return 1;}
  //then i make the recursion part multiply n by itself minues 1 each time.  i multiply n by putting it by subtracting it by 1 and putting it back into the same function.
  return n * factorial(n-1);
};
console.log(factorial(3))//,(3*2*1)--> 6);
console.log(factorial(5))//-->120

//On Unix system type files can be identified with the ls -l command which displays the type of the file in the first alphabetic letter of the file system permissions field.
//hese are the types
//'-' A regular file ==> file.
//'d' A directory ==> directory.
//'l' A symbolic link ==> symlink.
//'c' A character special file. It refers to a device that handles data as a stream of bytes (e.g: a terminal/modem) ==> character_file.
//'b' A block special file. It refers to a device that handles data in blocks (e.g: such as a hard drive or CD-ROM drive) ==> block_file.
//'p' a named pipe ==> pipe.
//'s' a socket ==> socket.
//'D' a door ==> door.
//make a function that return the filetype as a string regarding the file_attribute given by the ls -l command.
function linuxType(file) {
	var list={ "-":"file", "d": "directory", "l": "symlink", "c":"character_file", "b":"block_file",
              "p": "pipe", "s": "socket", "D": "door"}
    return list[file[0]];
}

console.log(linuxType("-rwxrwxrwx"))//,"file")
console.log(linuxType("Drwxr-xr-x"))//,"door")
console.log(linuxType("lrwxrw-rw-"))//,"symlink")
console.log(linuxType("srwxrwxrwx"))//,"socket")

// a different version of the function above useing a switch statement
function linuxType(file) {
  switch(file[0]){
    case "-": return "file";
      break;
    case "d": return "directory";
      break;
    case "l": return "symlink";
      break;
    case "c": return "character_file";
      break;
    case "b": return "block_file";
      break;
    case "p": return "pipe";
      break;
    case "s": return "socket";
      break;
    case "D": return "door";
  		break;}
}

//You will be given an array of objects representing data about developers who have signed up to attend the next coding meetup that you are organising.
//write a function that when executed as findAdmin(list, 'JavaScript') returns only the JavaScript developers who are GitHub admins:
//The original order should be preserved.
//If there are no GitHub admin developers in a given language then return an empty array [].
//The strings representing whether someone is a GitHub admin will always be formatted as 'yes' and 'no' (all lower-case).
//The strings representing a given language will always be formatted in the same way (e.g. 'JavaScript' will always be formatted with upper-case 'J' and 'S'.
function findAdmin(list, lang) {
  // pretty simple i run the array (list) through the filter method looking for the ones that match the language given and that are github administrators
  return list.filter(function(c,i,a) { if (c["language"]===lang && c["githubAdmin"] ==="yes" ){ return c;} });
}
var list1 = [
  { firstName: 'Harry', lastName: 'K.', country: 'Brazil', continent: 'Americas', age: 22, language: 'JavaScript', githubAdmin: 'yes' },
  { firstName: 'Kseniya', lastName: 'T.', country: 'Belarus', continent: 'Europe', age: 49, language: 'Ruby', githubAdmin: 'no' },
  { firstName: 'Jing', lastName: 'X.', country: 'China', continent: 'Asia', age: 34, language: 'JavaScript', githubAdmin: 'yes' },
  { firstName: 'Piotr', lastName: 'B.', country: 'Poland', continent: 'Europe', age: 128, language: 'JavaScript', githubAdmin: 'no' }
];
console.log(findAdmin (list1, "JavaScript"));
/*[
  { firstName: 'Harry', lastName: 'K.', country: 'Brazil', continent: 'Americas', age: 22, language: 'JavaScript', githubAdmin: 'yes' },
  { firstName: 'Jing', lastName: 'X.', country: 'China', continent: 'Asia', age: 34, language: 'JavaScript', githubAdmin: 'yes' }
  ]*/

  //You will be given an array of objects representing data about developers who have signed up to attend the next coding meetup that you are organising.
  //write a function that returns the average age of developers (rounded to the nearest integer).
  function getAverageAge(list) {
    var t=0;
    for (var i=0; i<list.length; i++){
  	t += list[i]["age"];
    }
    return Math.round(t/list.length);
  }
  var list1 = [
    { firstName: 'Maria', lastName: 'Y.', country: 'Cyprus', continent: 'Europe', age: 30, language: 'Java' },
    { firstName: 'Victoria', lastName: 'T.', country: 'Puerto Rico', continent: 'Americas', age: 70, language: 'Python' },
  ];
  console.log(getAverageAge(list1));
  //-->50

//here is a better function of the above challenge, i couldn't get the filter to work.  But i found out why
  function getAverageAge(list) {
    var x= list.reduce(function (t,c){  return t=t+ c["age"]; },0);
    return Math.round(x/list.length);
  }

  //write a function which takes a sorted array (ary) and a value (val), and returns the lowest index where you could insert val to maintain the sorted-ness of the array. The input array will always be sorted in ascending order. It may contain duplicates.
  function keepOrder(ary, val) {
    // here i check if there are any values in the array, if there isn't i return 0
    if( ary.length===0) { return 0;}
    // in this loop i check through every element in the array until i find one that is greater than or equal to the value given to the function.  if i find one that fits i return that index number, if there aren't any then i return the given array length, which is where i would put the value given.
    for (var i=0; i<ary.length; i++){
      if (ary[i]>=val){ return i; break;}
      if (ary[ary.length-1]<val){ return ary.length;}
    }
  }
  console.log(keepOrder([1, 2, 3, 4, 7], 5))// #=> 4
  console.log(keepOrder([1, 2, 3, 4, 7], 0))// #=> 0
  console.log(keepOrder([1, 1, 2, 2, 2], 2))//#=> 2

  //You will be given an array of objects representing data about developers who have signed up to attend the next coding meetup that you are organising.
  //write a function that returns:
  //true if at least one Ruby developer has signed up; or
  //false if there will be no Ruby developers.
  function isRubyComing(list) {
    for (var i=0; i<list.length; i++){
      if (list[i].language ==="Ruby"){
        return true;}  }
      return false;
  }
  var list1 = [
    { firstName: 'Emma', lastName: 'Z.', country: 'Netherlands', continent: 'Europe', age: 29, language: 'Ruby' },
    { firstName: 'Piotr', lastName: 'B.', country: 'Poland', continent: 'Europe', age: 128, language: 'Javascript' },
    { firstName: 'Jayden', lastName: 'P.', country: 'Jamaica', continent: 'Americas', age: 42, language: 'JavaScript' }
  ];
  console.log(isRubyComing(list1));//-->true;

//here is a shorter version of the array above using the some () method for arrays.
function isRubyComing(list) {
  return list.some(function(c) { return c.language ==="Ruby"} );
}

//You will be given an array of objects (associative arrays in PHP) representing data about developers who have signed up to attend the next coding meetup that you are organising.
//Your task is to return an array where each object will have a new property 'greeting' with the following string value:
//Hi < firstName here >, what do you like the most about < language here >?
function greetDevelopers(list) {
  return list.map( function(c) {
    				c.greeting = `Hi ${c.firstName}, what do you like most about ${c.language}?`;
  		return c } )
}
var list1 = [
  { firstName: 'Sofia', lastName: 'I.', country: 'Argentina', continent: 'Americas', age: 35, language: 'Java' },
  { firstName: 'Lukas', lastName: 'X.', country: 'Croatia', continent: 'Europe', age: 35, language: 'Python' },
  { firstName: 'Madison', lastName: 'U.', country: 'United States', continent: 'Americas', age: 32, language: 'Ruby' }
];
console.log(greetDevelopers(list1));
/*-->[
  { firstName: 'Sofia', lastName: 'I.', country: 'Argentina', continent: 'Americas', age: 35, language: 'Java',
    greeting: 'Hi Sofia, what do you like the most about Java?'
  },
  { firstName: 'Lukas', lastName: 'X.', country: 'Croatia', continent: 'Europe', age: 35, language: 'Python',
    greeting: 'Hi Lukas, what do you like the most about Python?'
  },
  { firstName: 'Madison', lastName: 'U.', country: 'United States', continent: 'Americas', age: 32, language: 'Ruby',
    greeting: 'Hi Madison, what do you like the most about Ruby?'
  }
];*/

//here is the first one i finished first befor i could get the map method to work
function greetDevelopers(list) {
  for (var i=0; i<list.length; i++){
    list[i].greeting = `Hi ${list[i].firstName}, what do you like most about ${list[i].language}?`;
  }
  	return list;
}

//You will be given an array of objects representing data about developers who have signed up to attend the next coding meetup that you are organising.
//Your task is to return an object which includes the count of each coding language represented at the meetup.
function countLanguages(list) {
  var obj= new Object ();
  for (var i=0; i<list.length; i++){
    if (obj.hasOwnProperty(list[i].language)===false){
      	obj[list[i].language]=1;}
    else (obj[list[i].language] ++);
  }
  return obj
}
var list1 = [
  { firstName: 'Noah', lastName: 'M.', country: 'Switzerland', continent: 'Europe', age: 19, language: 'C' },
  { firstName: 'Anna', lastName: 'R.', country: 'Liechtenstein', continent: 'Europe', age: 52, language: 'JavaScript' },
  { firstName: 'Ramon', lastName: 'R.', country: 'Paraguay', continent: 'Americas', age: 29, language: 'Ruby' },
  { firstName: 'George', lastName: 'B.', country: 'England', continent: 'Europe', age: 81, language: 'C' },
];
console.log(countLanguages(list1));  //-->{ C: 2, JavaScript: 1, Ruby: 1 }

//Chingel is practicing for a rowing competition to be held on this saturday. He is trying his best to win this tournament for which he needs to figure out how much time it takes to cover a certain distance.
//You will be provided with the total distance of the journey, speed of the boat and whether he is going downstream or upstream. The speed of the stream and direction of rowing will be given as a string. Check example test cases!
//your function should return the time taken to cover the distance. If the result has decimal places, round them to 2 fixed positions.
// it is not stated which way chingel is going (downstream, or upstream).  but based on the examples i am going to assume downstream.
function time(distance,boatSpeed,stream){
  //first i split the stream string into an array with two elements (the direction and speed).  then i check if it is down stream or up, if its down i add the speed to the boad speed, if its up i subtract it.
	stream=stream.split(" ");
  if (stream[0]=== "Downstream"){ boatSpeed += stream[1]*1;}
  else { boatSpeed -= stream[1]*1};
  // then i do a simple division to find the time and fix it to the second decimal point multiplying the asnwer by 1 to make sure it's returned as a number
  return (distance/boatSpeed).toFixed(2)*1;
}
console.log(time(24,10,"Downstream 2"))//-->,2);
console.log(time(24,14,"Upstream 2"))//-->,2);
console.log(time(54,28,"Downstream 3"))//-->,1.74);

//Given the triangle of consecutive odd numbers:
//			   1		(index 1)
//          3     5		(index 2)
//       7     9    11
//   13    15    17    19
//21    23    25    27    29
//...
//Calculate the row sums of this triangle from the row index (starting at index 1) e.g.:
function rowSumOddNumbers(n) {
 // first i had to figure our the patter so i can make a row without making an infinite row of tables.
  //patter-- to get each row of numers you have multiply the row number by (index-1) and add 1/ then you have to  add 2 to each number to get the next number, the index number is how many elements are in that row
  var t=0;
  // now i make a loop that makes a row of the triable based on my pattern.
  for (var i= n*(n-1) +1, x=0; x<n; i+=2, x++){
    t+=i;
  }
  return t
}
console.log(rowSumOddNumbers(1)); //--> 1
console.log(rowSumOddNumbers(2)); //--> 3 + 5 = 8
console.log(rowSumOddNumbers(42))//--> 74088);

//Given a string, swap the case for each of the letters.
//CodEwArs --> cODeWaRS
function swp(str){
  //this is a pretty simple one.  first i split the string into an array with each letter being an indivdual element.
	return str.split("").map( function(c) {
      //now i use the map method to run each element of the array through this fucntion that checks if the letter is already lower case and if it is it changes that letter to uppercase, if it's not i changes to lower case.
      	return c.toLowerCase() ===c? c.toUpperCase(): c.toLowerCase(); } ).join("");
}
console.log(swap("CodeEwArs"));

//write function (accum) that does the following:
//accum("abcd");    // "A-Bb-Ccc-Dddd"
//accum("RqaEzty"); // "R-Qq-Aaa-Eeee-Zzzzz-Tttttt-Yyyyyyy"
//accum("cwAt");    // "C-Ww-Aaa-Tttt"
function accum(s) {
  //first i make a blank string variable (str) and split s into an array
	var str=""; s=s.split("");
  // now i start a for loop that will go through each charater in the s array make them uppercase and add it to str.
  for (var i=0; i<s.length; i++){
    str+= s[i].toUpperCase();
    // this inner for loop continues on the outer for loop by adding the same character (in lowercase) to it as long as d is less than i.
    for (var d= 0; d<i;d++){
      str+=s[i].toLowerCase();
    }
    // and finally i add the "-" part to the str between each set of letters.
    str+= "-";
  }
  // these two lines are to get rid of the "-" at the end of the string that the for loop adds.
  str=str.split(""); str.pop()
   str=str.join("");
  return str
}
console.log(accum("abcd"))//;    // "A-Bb-Ccc-Dddd"

//The christmas song sheets have been dropped in the snow and the lines of each verse have become all jumbled up.
//You have to write a comparator function which can sort the lines back into their correct order, otherwise Christmas will be cancelled!
//Reminder: Below is what the final verse should look like
/*On the 12th day of Christmas my true love gave to me
12 drummers drumming,
11 pipers piping,
10 lords a leaping,
9 ladies dancing,
8 maids a milking,
7 swans a swimming,
6 geese a laying,
5 golden rings,
4 calling birds,
3 French hens,
2 turtle doves and
a partridge in a pear tree.*/
var comparator = function(a) {
  var str=a.split("On the "), num=str[1].split("t"), arr=[],
      song=["a partridge in a pear tree.", "2 turtle doves and", "3 French hens", "4 calling birds", "5 golden rings", "6 geese a laying", "7 swans a swimming", "8 maids a milking", "9 ladies dancing", "10 lords a leaping", "11 pipers piping", "12 drummers drumming"],
      day={ 1:"1st", 2:"2nd", 3:"3rd", 4:"4th", 5:"5th", 6:"6th", 7:"7th", 8:"8th", 9:"9th", 10:"10th", 11:"11th", 12:"12th"};
  for (var i=num[0]; i>0; i--){
    arr.push (song[i-1]);
  };
  arr=arr.join("\n");

  return  `On the ${day[(num[0] *1)]} day of christmas my true love gave to me`  + "\n" + arr
}
var str= "5 golden rings, 4 calling birds, 3 French hens, 2 turtle doves and, On the 5th day of Christmas my true love gave to me 12 drummers drumming,  a partridge in a pear tree."
console.log (comparator (str, 8));
/*--> On the 5th day of christmas my true love gave to me
5 golden rings
4 calling birds
3 French hens
2 turtle doves and
a partridge in a pear tree.*/

//The mean (or average) is the most popular measure of central tendency; however it does not behave very well when the data is skewed (i.e. wages distribution). In such cases, it's better to use the median.
//Your task for this kata is to find the median of an array consisting of n elements.
function median(n){
  if (n.length===0) { return false;}
  n=n.sort( function(a,b) { return a-b;} );
  if (n.length %2===0){
      return (n[n.length/2]-n[n.length/2 -1])/2 + n[n.length/2 -1];
  }
  else { return n[Math.round(n.length/2)-1];}
  return n;
}
console.log(median( [1, 2, 3, 4]))// --> Median 2.5
console.log(median([3, 4, 1, 2, 5]))// --> Median 3

//write a function that is given an array of objects and returns the number of "JavaScript" developers coming from Europe.
function countDevelopers(list) {
  var t=0;
  list.map( function (c,i,a) { if (c.continent === "Europe" && c.language === "JavaScript") { return t++;}});
  return t;
}
var list1 = [
  { firstName: 'Noah', lastName: 'M.', country: 'Switzerland', continent: 'Europe', age: 19, language: 'JavaScript' },
  { firstName: 'Maia', lastName: 'S.', country: 'Tahiti', continent: 'Oceania', age: 28, language: 'JavaScript' },
  { firstName: 'Shufen', lastName: 'L.', country: 'Taiwan', continent: 'Asia', age: 35, language: 'HTML' },
  { firstName: 'Sumayah', lastName: 'M.', country: 'Tajikistan', continent: 'Asia', age: 30, language: 'CSS' }
];
console.log(countDevelopers( list1));
//--> 1.

//Given an array of strings representing a list of usernames, return true only if all usernames comply with your company's guidelines. Return false otherwise.
//The guidelines say that the username is valid only if:
//    	it is between 6-10 characters long;
//    contains at least 1 lowercase letter;
//    contains at least 1 number;
//    contains only numbers and lowercase letters.
function authList(arr) {
  var an=["0","1","2","3","4","5","6","7","8","9","a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k","l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v","w", "x", "y", "z"];
  for (var i=0; i<arr.length; i++){
    for (var d=0; d<arr[i].length; d++){
      if (an.indexOf(arr[i][d])===-1) { return false;}
          }
  if (arr[i].match("[a-z]")=== null){ return false;}
  else if (arr[i].match("[0-9]")=== null){ return false;}
  else if (6>arr[i].length || arr[i].length>10){ return false;}
  }
    return true;
}
console.log(authList(['john123', 'alex222', 'sandra1']));
// returns true
console.log(authList(['john123', 'alex222', 'sandraW']));
// returns false because sandraW has no number
console.log(authList( ['john_123', 'alex222', 'sandra1']))
// returns false because john_123 contains an invalid character

//Create a function that takes two arguments:
//1) An array of objects which feature the season, the team and the country of the Champions League winner.\
//2) Country (as a string, for example, 'Portugal')
//You function should then return the number which represents the number of times a team from a given country has won. Return 0 if there have been no wins.
function countWins(winnerList, country) {
  var t=0;
  winnerList.map( function (c,i,a) { if (c.country=== country) { return t++;} } );
  return t
}
const winnerList1 = [
  { season: '1996–97', team: 'Borussia Dortmund', country: 'Germany' },
  { season: '1997–98', team: 'Real Madrid', country: 'Spain' },
  { season: '1998–99', team: 'Manchester United', country: 'England' },
  { season: '2002–03', team: 'Milan', country: 'Italy' },
  { season: '2003–04', team: 'Porto', country: 'Portugal' },
  { season: '2005–06', team: 'Barcelona', country: 'Spain' },
  { season: '2006–07', team: 'Milan', country: 'Italy' },
  { season: '2011–12', team: 'Chelsea', country: 'England' },
  { season: '2012–13', team: 'Bayern', country: 'Germany' },
];
console.log(countWins(winnerList1, 'Portugal'))//, 1);
console.log(countWins(winnerList1, 'FootLand'))//, 0);
console.log(countWins(winnerList1, 'Spain'))//, 2

//you are given four parameters --p0 the starting population of the town, percent, aug (inhabitants coming or leaving each year), and p (population to surpass).
//the function nb_year should return n number of entire years needed to get a population greater or equal to p.
//Ex:In a small town the population is p0 = 1000 at the beginning of a year. The population regularly increases by 2 percent per year and moreover 50 new inhabitants per year come to live in the town. How many years does the town need to see its population greater or equal to p = 1200 inhabitants?
/*      At the end of the first year there will be:
      1000 + 1000 * 0.02 + 50 => 1070 inhabitants

      At the end of the 2nd year there will be:
      1070 + 1070 * 0.02 + 50 => 1141 inhabitants (number of inhabitants is an integer)

      At the end of the 3rd year there will be:
      1141 + 1141 * 0.02 + 50 => 1213*/
//It will need 3 entire years.
function nb_year(p0, percent, aug, p) {
  var y=0;
    while (p0<p){
      p0=p0 + (p0 *( percent/100)) + aug;
      y++;
    }
  return y;
}
console.log(nb_year(1500, 5, 100, 5000))// -> 15
console.log(nb_year(1500000, 2.5, 10000, 2000000))// -> 10

//You will be given a number and you will need to return it as a string in Expanded Form. For example:
console.log(expandedForm(12)); // Should return '10 + 2'
console.log(expandedForm(42)); // Should return '40 + 2'
console.log(expandedForm(70304)); // Should return '70000 + 300 + 4'
function expandedForm(num) {
  // first i make a blank string var (s) and i turn num into a string an split it into an array.
  var s=""; num= num.toString().split("");
  //this for loop is going to go through each element of the num array and if the number isn't 0 then i'm going to add it to the s string and push it into the inner for loop.
  for (var i=0; i<num.length; i++){
    if (num[i]>0){
      s+=num[i]
      // this inner for loop adds 0's to the s string by the number of spaces in the array after the elment that is greater than 0.
      // for example witht the num 70304, the outer for loop would add 7 to s and this for loop would add 4 0's to that 7 making it 7000.
      for (var d=i+1; d<num.length; d++){
      s += 0;
      }
    };
  }
  //now i split the s string into an array so i can work on adding in the plus signs
  s=s.split("");
  // this for loop runs through each elemnet and checks if it is a 0, and this element is not the last in the array, and the next element is not a 0
  // if the element meets this criteria then it will change the "0" to "0 + " and put it back into the array.
  for (var i=0; i<s.length; i++){
    if (s[i]==="0" && s[i+1] !="0" && i!= (s.length-1)){ s[i] = "0 + "}
  }
  // now i join it back into a string.
    return s.join("");
}

//There is an array with some numbers. All numbers are equal except for one. Try to find it!
function findUniq(arr) {
  	var n, x=arr.length; arr=arr.sort()
    for (var i=0; i<x; i++){
      if ((i===0) && (arr[i]!=arr[i+1] && arr[i]!=arr[i+2])) {
        return n=arr[i]; break;}
      else { return arr[x-1];}
    }
  return n;
}
console.log(findUniq([ 1, 1, 1, 2, 1, 1 ]))// === 2
console.log(findUniq([ 0, 0, 0.55, 0, 0 ]))// === 0.55

//here is a better version of the function above that i should have thought of first.
function findUniq (arr) {
  arr.sort();
  return arr[0]===arr[1]? arr.pop(): arr[0];
}
