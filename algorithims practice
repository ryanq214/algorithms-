// Make a function that reverse an array without using the reverse method
//and without putting it into another array.
function reverseArrayInPlace(arr){
  var l=arr.length*2, d=arr.length;
  for (var i=0; i<l; i+=2){
    arr.unshift(arr[i]);
  }
  for (var i=0; i<d; i++){
       arr.pop();
       }
  return arr;}
var arrayValue = [1, 2, 3, 4, 5];
reverseArrayInPlace(arrayValue);
console.log(arrayValue);
//-->[5,4,3,2,1]

//You are boarding a train and your friend wants to know how long until you arrive.  Round the answer to the nearest half hour.
// answer "The train will be there in ? hours."
function reachDestination(distance, speed) {
	var x=distance/speed;
  x=(Math.round(x*2))/2;
  // this rounds it to the nearest half or whole number .
  return "The train will be there in " + x + " hours.";
}
console.log(reachDestination(74,20));
//-->The train will be there in 3.5 hours.
// a pretty simple one.  the hardest part was finding a way to round to the nearest half or whole number.

//you are given a number and you need to return two arrays.
//The first will have any number that when squared equals a factor of the number given or the number itself.
// the second array will have any numbers that when cubed equal a factor or the number itself.
function factor(n) {
  var factors=[], sq=[], cub=[];
  for (var i=0; i<=n; i++){
    for(var d=0; d<=n; d++){
      if (i*d===n){ factors.unshift(d);}
    }
  }
  factors.shift();
  for (var i=2; i<=n; i++){
    if (factors.indexOf(i*i)!=-1){ sq.push(i);}
  }
  for (var i=2; i<=n; i++){
    if(factors.indexOf(i*i*i)!=-1){cub.push(i);}
  }
  return [sq, cub];
}
console.log(factor(81));
//-->[[3, 9], [3]]

///shorter version of the above function
function factor(n) {
  var factors=[], sq=[], cub=[];
  for (var i=0; i<=n; i++){
    for(var d=0; d<=n; d++){
      if (i*d===n){ factors.unshift(d);}
    }
  }
  factors.shift();
  for (var i=0; i<=Math.sqrt(n); i++){
 		if(Math.sqrt(factors[i])%1===0){ sq.push(Math.sqrt(factors[i]))};
    	if(factors.indexOf(i*i*i)!=-1){cub.push(i);}
  }
  return[sq, cub];
}


//The function should take one parameter: an object/dict with two or more name-value pairs which represent the members of the group and the amount spent by each.
//The function should return an object/dict with the same names, showing how much money the members should pay or receive.
//round decimals to the 2nd place
function splitTheBill(x) {
    var t= 0,a=0;
    for( var i in x){
      t=t+x[i];
      a+=1;
    }
  t=t/a;
  for(var i in x){
    x[i]= (t-x[i])*-1;
    if(x[i]===0){x[i]*-1}
    x[i]=1*x[i].toFixed(2);
  }
	return x;
}
var a={
    A: 40, B: 25, X: 10
}
console.log(splitTheBill(a));
//-->{A: 5, B: 0, C: -5}

//you are given two strings and you need to creat a function that adds these two strings
//together, sorts them from a-z, and gets rid of any duplicates.
function longest(s1, s2) {
  var ar=(s1+s2).split("")
  ar=ar.sort()
    ar=ar.filter(function (c,i,a){ if(c!=a[i+1]){ return c;} })
  return ar.join("");
}
var a = "xyaabbbccccdefww";
var b = "xxxxyyyyabklmopq";
console.log(longest(a,b));
//-->"abcdefklmopqwxy"

//creat a function that takes a number and returns the number in the descending order.
function descendingOrder(n){
  var ar=n.toString().split("").sort(function(a,b){ return b-a;}).join("");
  return ar*1;
}
console.log(descendingOrder(1254859723));
//Input: 145263 Output: 654321
//Input: 1254859723 Output: 9875543221

//create a function that counts the number of vowels in a string and returns the number.
function getCount(str) {
  var c = 0, v=["a", "e", "i", "o", "u"];
  str=str.toLowerCase().split("");
  for(var i=0; i<str.length; i++){
    for(var d=0; d<v.length; d++){
      if(str[i]===v[d]){ c++;}
    }
  }
  return c;
}
console.log(getCount("abracadabra"));
//-->5
//this is a better version using regular expressions.
function getCount(str) {
  return str.match(/[aeiou]/gi).length;
}

//you are given a start and end number and you should return the count of all numbers from the start to the end,
// except numbers with a 5 in it. The start and the end number are both included in the count
function dontGiveMeFive(x,y){
 var arr=[], n=0;
  for (var i=x; i<=y; i++){
    n=i.toString().split("");
  	if(n.indexOf("5")===-1){
      arr.push(i);
    }
  }
  return arr.length;
}
console.log(dontGiveMeFive(4,17));
//dontGiveMeFive(1,9) -> [1,2,3,4,6,7,8,9] -> Result 8
//dontGiveMeFive(4,17) -> [4,6,7,8,9,10,11,12,13,14,16,17] -> Result 12

//Given an array of numbers, return an array, with each member of input array rounded to
//the nearest number, divisible by 5.return the list with all numbers rounded to nearest 0 or 5
function roundToFive(num){
  var x=0,y=0
  for(var i=0; i<num.length; i++){
    x=num[i].toString().split("");
    if(x[x.length-1]>5){ x[x.length-1]-=5;}
    if(x[x.length-1]>=2.5){
      num[i]=Math.ceil(num[i]);
      while(num[i]%5!=0){
        num[i]+=1;
      }
    }
    else {
      num[i]=Math.floor(num[i]);
      while(num[i]%5!=0){
        num[i]-=1;
      }
  }
  }
  return num
}
console.log(roundToFive([2,46,8,71.3]));
//-->[0, 45, 10, 75]

//you have to create a function that will produce a multi-dimensional array out of the
//four digit number given. Each inner dimension of the array represents an individual
//digit from the given number, and will include all numbers that come before it, going back to 0.
function counterEffect(hitCount) {
 var arr=String(hitCount).split(""),na=[], ans=[];
 for(var i=0; i<arr.length; i++){
   	for(var d=0; d<=arr[i]; d++){
     na.push(d);
    }
   ans.push(na);
   na=[];
 }
  return ans;
}
console.log(counterEffect("0050"));
//-->[[0,1],[0,1,2],[0,1,2,3,4,5],[0]]);
//input=("0050"),  answer= [[0],[0],[0,1,2,3,4,5],[0]]);
//input=("0000"),  answer=[[0],[0],[0],[0]]);

//Your task is to write an update for a lottery machine.
//Its current version produces a sequence of random letters and integers (passed as a
//string to the function lottery()). Your code inside lottery() must filter out all
//letters and return unique integers as a string.
//If there are no integers in the string return - “One more run!”.
function lottery(str){
  var ar=str.split(""), ans=""
  for (var i=0; i<ar.length; i++){
    if(isNaN(ar[i]) === false && ans.split("").indexOf(ar[i])===-1){
      ans= ans + ar[i];}
  }
  if (ans.length===0){ return "One more run!";}
  return ans
}

console.log(lottery("wQ8Hy0y5m5oshQPeRCkG"))
//-->"805"
//input=("hPrBKWDH8yc6Lt5NQZWQ"), answer="865"
// input="ynMAisVpHEqpqHBqTrwH", answer="One more run!"

function lottery(str){
  var ar=str.replace(/[a-z]/gi, "");
 	ar=ar.split("").filter(function (c,i,a){ return a.indexOf(c)==i;}).join("");
  if(ar.length===0){ return "One more run!";}
  return ar
}

//Is every value in the array an array?
//This should only test the second array dimension of the array. The values of the
//nested arrays don't have to be arrays.
function arrCheck(x){
  var ans=true;
  for (var i=0; i<x.length; i++){
    if(Array.isArray(x[i]) != true){
     return false;
    }
  }
  return ans
}
console.log(arrCheck([{1:1},{2:2}]));
//[[1],[2]] => true
//['1','2'] => false
//[{1:1},{2:2}] => false

// a better version of the funciton above using the Each() method for arrays (that i just learned)
function arrCheck(x){
  return x.every (Array.isArray);
}

//write a function that finds the ascii value of a given name where a=65 and A=97.  Any
//character that is not in the alphabet= 0.
function getWeight(name){
  var val={a:65, b:66, c:67, d:68, e:69, f:70, g:71, h:72, i:73, j:74, k:75, l:76, m:77, n:78,
         o:79, p:80, q:81, r:82, s:83, t:84, u:85, v:86, w:87, x:88, y:89, z:90};
	var s=name.replace(/\s/, "").trim().split(""), ans=0,x=0;
  for(var i=0; i<s.length; i++){
    x=s[i];
    if(val[x]==undefined && val[x.toLowerCase()]==undefined){ continue;}
    if (s[i].toLowerCase()!=s[i]){
        ans+=32;
    	x=s[i].toLowerCase();}
   ans+=val[x];
    }
  return ans
}
console.log(getWeight("Joe"))
//--> 254
//console.log(getWeight("J45 oe*&")) -->254
//console.log(getWeight("CJ"))// 205);
//console.log(getWeight("cj"))// 141);
// this one was a little tougher than the last few.

// write a funciton that is given a string and a horizontal value(k) and a vertical value(v).
// the horizonatal value is number of times you should repeat each character, except for "\n".
// Ex: if k=2 and the string is "abc".  the result should be "aabbcc".
//the vertical value is the number of times you should repeat each section of letter between the "\n"
// Ex: if v=2 and the string given is "abc\ndef\nji".  you answer should be
//"abc\nabc\ndef\ndef\nji\nji".
// so if you are given a string "abc\nde", k=2, v=2.  then your answer should be this
//"aabbcc\naabbcc\nddee\nddee"
function scale(string, k, v) {
 if(string.length===0) { return string;}
  a= string.split(""),arr=[],ar=[],y="",x="";
  for (var i=0; i<a.length; i++){
    for (var d=0; d<k; d++){
      if(y!="\n"){
      y+=a[i];
    }; }
    ar.push(y);
    y="";
  }
	ar=ar.join("").split("\n");
  for (var i=0; i<ar.length; i++){
    for(var d=0; d<v; d++){
    	x= x+ar[i]+"\n";
    }
    arr.push(x);
    x="";
  }
 arr=arr.join("").split("");
  arr.pop();
  arr=arr.join("");
  return arr
}
var a = "abcd\nefgh\nijkl\nmnop"
console.log(scale(a,2,3));
//--> "aabbccdd\naabbccdd\naabbccdd\neeffgghh\neeffgghh\neeffgghh\niijjkkll\niijjkkll\niijjkkll\nmmnnoopp\nmmnnoopp\nmmnnoopp"

//Your task is to write a function which returns the sum of following series upto the
// nth term(parameter). Series: 1 + 1/4 + 1/7 + 1/10 + 1/13 + 1/16 +...
//You need to round the answer upto 2 decimal places and return it as String.
//If the given value is 0 then it should return 0.00
function SeriesSum(n){
  if(n===0){ return "0.00";}
  var arr=[1],x=0;
  for (var i=1; i<n; i++){
    arr.push( 1/(4+x));
    x+=3;
  }
  arr=arr.reduce(function (tv, cv) { return tv+=cv;});
  return arr.toFixed(2);
}
console.log(SeriesSum(1))//--> "1.00"
console.log(SeriesSum(2))//--> "1.25"
console.log(SeriesSum(3))//--> "1.39"
console.log(SeriesSum(4))//--> "1.49"

//this is a shorter version of the above function.  I don't know why i put it into an array first.
function SeriesSum(n){
  var x=0;
  for (var i=0; i<n; i++){
   x=x+1/(1+i*3);
  }
 return x.toFixed(2);
}

//Given a number, return the maximum value by rearranging it's digits.
function rotateToMax(n) {
  n=n.toString().split("").sort(function(a,b){ return b-a}).join("");
  return n*1
}
console.log(rotateToMax("001"));
//-->321
//(786) => 876
//("001)=> 100

// you are given an two strings and have to combine then in this way-->
//The first line of strng has the first char of the first line of s1 plus the chars of the last line of s2.
//The second line of strng has the first two chars of the second line of s1 plus the chars of the penultimate line of s2 except the last char
//and so on until the nth line of strng has the n chars of the nth line of s1 plus the first char of the first line of s2.
function compose(s1, s2) {
  //first I put the second string into and array and reverse it as chunks so its easier to combine with the 1st string(just going down the array).  then I put the first string into an array seperated by the \n character so its still in the chunks.
   s2=s2.split("\n").reverse(); s1=s1.split("\n");
  var arr=[],x=0,t=s1[0].length,y="",z=""
 //now i run a for loop going trhough the length of the s1 array, the first example has four chunks seperated by \n so it will run four times.
  for(var i=0; i<s1.length; i++){
   // this for loop goes into the s1 array and adds characters into the y variable, each times it goes through it adds 1 more character.  It adds just 1 character the first time, and then 2 and so on.  i used the var x as the limit, adding 1 to it at the end of the main loop.
    for (var d=0; d<=x; d++){
     y=y+s1[i][d];
    }
    // this for loop does what the one above does but starting by adding the most characters the first time,  then it adds one less character each time.  i used the y var as the limit for this loop starting it out as the length of a chunk in the s1 array and subtracting 1 from it at the end of the main loop.
    for(var c=0; c<t; c++){
      z=z+s2[i][c];
    }
    // at the end the main for loop i add the y and z variables together and put then into the new array that i made.  i also adjust the x and y variable for the inner for loops.
     arr.push(y +z);
    y="", z="";
    x++, t--;
  }
  // now i join the arr array into a string adding the \n in between the chunks
  return arr.join("\n");
}
console.log(compose ("abcd\nefgh\nijkl\nmnop", "qrst\nuvwx\nyz12\n3456"));
// -> "a3456\nefyz1\nijkuv\nmnopq"

// write three functions.  the first function (vert mirrors) is given a string and returns it with each set of character between the "\n" character is reversed but set in the same order and resturns this as a string.
//the second function (hor mirrors) is also given a string and returns it by reversing the order of the sets bewteen the "\n" but leaves the sets themselves in the same order and returns that as a string.
//The third function (oper) takes two parameters, a fuction (either vert mirror or hor mirror) and a string.  It then returns the string through that function and returns the answer.
function vertMirror(str) {
  //first i split the string into section between the "\n" character
  str=str.split("\n");
  //this loop goes through each section splitting them into arrays themselves so i can reverse them and return back into the original array as reversed strings.
  for (var i=0; i<str.length; i++){
    str[i]=str[i].split("").reverse().join("");}
  //then i join the array back together with the "\n" between the sections.
  return str.join("\n");
}
function horMirror(str) {
  //I first split the string into sets again but this time i reverse the array as a whole without reversing the sets themselves.  then i join it back into a string.
    str=str.split("\n").reverse().join("\n");
  return str;
}
function oper(fct, s) {
    return fct(s);
}
s = "abcd\nefgh\nijkl\nmnop"
console.log(vertMirror(s))// => "dcba\nhgfe\nlkji\nponm"
console.log(horMirror(s));// => "mnop\nijkl\nefgh\nabcd"
console.log(oper(vertMirror, s));// => "dcba\nhgfe\nlkji\nponm"
console.log(oper(horMirror, s))// => "mnop\nijkl\nefgh\nabcd"

//Create a function that will take three parameters(fmt, nbr and start) and create an array of nbr elements formatted according to the frm with the starting index of start.
//fmt will have <index_no> inserted at various locations; this is where the file index number goes in each file.
//If nbr is less than or equal to 0, or not whole, return an empty array.
//If fmt does not contain '<index_no>', just return an array with nbr elements that are all equal to fmt.
//If start is not an integer, return an empty array.
function nameFile (fmt, nbr, start){
  if(nbr<=0|| nbr%1!=0){ return [];}
  if (start%1!=0){ return [];}
  var ar=[];
  //pretty simple i make a for loop that replaces the <index_no> in fmt with the current start value and pushes it into the new array
  for (var i=0; i<nbr; i++){
    // here i meet the condition if there is no <index_no> in the fmt
    if (fmt.indexOf("<index_no>")===-1){ ar.push(fmt);}
    else {ar.push(fmt.replace(/<index_no>/gi, start)) }
    //at the end fo the for loop i increase the start value by 1
    start ++;
  }
	return ar;
}
console.log(nameFile("IMG <index_no>", 4, 1));//-->["IMG 1", "IMG 2", "IMG 3", "IMG 4"])
console.log(nameFile("image #<index_no>.jpg", 3, 7))
//-->["image #7.jpg", "image #8.jpg", "image #9.jpg"]
console.log(nameFile("#<index_no> #<index_no>", 3, -2));
//-->["#-2 #-2", "#-1 #-1", "#0 #0"]

// here is a better version of the above function using the map method for an array.  I should have rememberd the map.
function nameFile(fmt, nbr, start) {
  return nbr <= 0 || start % 1 !== 0 || nbr % 1 !== 0 ? [] : str.split(" ").map(function(_, i){ return fmt.replace(/\<index\_no\>/g, start + i) });
}

//In mathematics, the factorial of a non-negative integer n, denoted by n!, is the product of all positive integers less than or equal to n.
//For example, 5! = 5 * 4 * 3 * 2 * 1 = 120.
//You have to create the function factorial that receives n and returns n!. You have to use recursion.
function factorial(n) {
  //first i check to make sure that n isn't 0 if it is i return 1.
  if(n===0){ return 1;}
  //then i make the recursion part multiply n by itself minues 1 each time.  i multiply n by putting it by subtracting it by 1 and putting it back into the same function.
  return n * factorial(n-1);
};
console.log(factorial(3))//,(3*2*1)--> 6);
console.log(factorial(5))//-->120

//On Unix system type files can be identified with the ls -l command which displays the type of the file in the first alphabetic letter of the file system permissions field.
//hese are the types
//'-' A regular file ==> file.
//'d' A directory ==> directory.
//'l' A symbolic link ==> symlink.
//'c' A character special file. It refers to a device that handles data as a stream of bytes (e.g: a terminal/modem) ==> character_file.
//'b' A block special file. It refers to a device that handles data in blocks (e.g: such as a hard drive or CD-ROM drive) ==> block_file.
//'p' a named pipe ==> pipe.
//'s' a socket ==> socket.
//'D' a door ==> door.
//make a function that return the filetype as a string regarding the file_attribute given by the ls -l command.
function linuxType(file) {
	var list={ "-":"file", "d": "directory", "l": "symlink", "c":"character_file", "b":"block_file",
              "p": "pipe", "s": "socket", "D": "door"}
    return list[file[0]];
}

console.log(linuxType("-rwxrwxrwx"))//,"file")
console.log(linuxType("Drwxr-xr-x"))//,"door")
console.log(linuxType("lrwxrw-rw-"))//,"symlink")
console.log(linuxType("srwxrwxrwx"))//,"socket")

// a different version of the function above useing a switch statement
function linuxType(file) {
  switch(file[0]){
    case "-": return "file";
      break;
    case "d": return "directory";
      break;
    case "l": return "symlink";
      break;
    case "c": return "character_file";
      break;
    case "b": return "block_file";
      break;
    case "p": return "pipe";
      break;
    case "s": return "socket";
      break;
    case "D": return "door";
  		break;}
}

//You will be given an array of objects representing data about developers who have signed up to attend the next coding meetup that you are organising.
//write a function that when executed as findAdmin(list, 'JavaScript') returns only the JavaScript developers who are GitHub admins:
//The original order should be preserved.
//If there are no GitHub admin developers in a given language then return an empty array [].
//The strings representing whether someone is a GitHub admin will always be formatted as 'yes' and 'no' (all lower-case).
//The strings representing a given language will always be formatted in the same way (e.g. 'JavaScript' will always be formatted with upper-case 'J' and 'S'.
function findAdmin(list, lang) {
  // pretty simple i run the array (list) through the filter method looking for the ones that match the language given and that are github administrators
  return list.filter(function(c,i,a) { if (c["language"]===lang && c["githubAdmin"] ==="yes" ){ return c;} });
}
var list1 = [
  { firstName: 'Harry', lastName: 'K.', country: 'Brazil', continent: 'Americas', age: 22, language: 'JavaScript', githubAdmin: 'yes' },
  { firstName: 'Kseniya', lastName: 'T.', country: 'Belarus', continent: 'Europe', age: 49, language: 'Ruby', githubAdmin: 'no' },
  { firstName: 'Jing', lastName: 'X.', country: 'China', continent: 'Asia', age: 34, language: 'JavaScript', githubAdmin: 'yes' },
  { firstName: 'Piotr', lastName: 'B.', country: 'Poland', continent: 'Europe', age: 128, language: 'JavaScript', githubAdmin: 'no' }
];
console.log(findAdmin (list1, "JavaScript"));
/*[
  { firstName: 'Harry', lastName: 'K.', country: 'Brazil', continent: 'Americas', age: 22, language: 'JavaScript', githubAdmin: 'yes' },
  { firstName: 'Jing', lastName: 'X.', country: 'China', continent: 'Asia', age: 34, language: 'JavaScript', githubAdmin: 'yes' }
  ]*/

  //You will be given an array of objects representing data about developers who have signed up to attend the next coding meetup that you are organising.
  //write a function that returns the average age of developers (rounded to the nearest integer).
  function getAverageAge(list) {
    var t=0;
    for (var i=0; i<list.length; i++){
  	t += list[i]["age"];
    }
    return Math.round(t/list.length);
  }
  var list1 = [
    { firstName: 'Maria', lastName: 'Y.', country: 'Cyprus', continent: 'Europe', age: 30, language: 'Java' },
    { firstName: 'Victoria', lastName: 'T.', country: 'Puerto Rico', continent: 'Americas', age: 70, language: 'Python' },
  ];
  console.log(getAverageAge(list1));
  //-->50

//here is a better function of the above challenge, i couldn't get the filter to work.  But i found out why
  function getAverageAge(list) {
    var x= list.reduce(function (t,c){  return t=t+ c["age"]; },0);
    return Math.round(x/list.length);
  }

  //write a function which takes a sorted array (ary) and a value (val), and returns the lowest index where you could insert val to maintain the sorted-ness of the array. The input array will always be sorted in ascending order. It may contain duplicates.
  function keepOrder(ary, val) {
    // here i check if there are any values in the array, if there isn't i return 0
    if( ary.length===0) { return 0;}
    // in this loop i check through every element in the array until i find one that is greater than or equal to the value given to the function.  if i find one that fits i return that index number, if there aren't any then i return the given array length, which is where i would put the value given.
    for (var i=0; i<ary.length; i++){
      if (ary[i]>=val){ return i; break;}
      if (ary[ary.length-1]<val){ return ary.length;}
    }
  }
  console.log(keepOrder([1, 2, 3, 4, 7], 5))// #=> 4
  console.log(keepOrder([1, 2, 3, 4, 7], 0))// #=> 0
  console.log(keepOrder([1, 1, 2, 2, 2], 2))//#=> 2
